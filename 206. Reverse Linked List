class ListNode{
	public ListNode next;
	public int val;
	public ListNode(int x) {
		this.val=x;
	}
}

public class Solution{
	public ListNode head;
	public int length=0;
	//打印链表
	public void printLinkList(ListNode x)
	{
		ListNode p=x;
		while(p!=null)
		{
			System.out.print(p.val+" ");
			p=p.next;
		}
		System.out.println();
		System.out.println("长度为："+length);		
	}
	//尾插法添加结点
	public void addLastNode(ListNode x)
	{
		if(head==null)
		{
			head=x;
			length++;
			return;
		}
		ListNode q=head;
		while(q.next!=null)
			q=q.next;
		q.next=x;
		length++;
	}
	//迭代法反转链表
	public ListNode reverseList0(ListNode head) {
		ListNode prev=null;
		ListNode curr=head;
		while(curr!=null)
		{
			ListNode nextTemp=curr.next;
			curr.next=prev;
			prev=curr;
			curr=nextTemp;
		}
		return prev;
    }
	
	//递归法反转链表
	public ListNode reverseList1(ListNode head) {
		if(head==null||head.next==null)
			return head;	
		ListNode p=reverseList1(head.next);
		head.next.next=head;
		head.next=null;
		return p;
    }
	public static void main(String[] args)
	{
		Solution main=new Solution();
		ListNode x1=new ListNode(1);
		main.addLastNode(x1);
		ListNode x2=new ListNode(2);
		main.addLastNode(x2);
		ListNode x3=new ListNode(3);
		main.addLastNode(x3);
		main.printLinkList(x1);
		ListNode nh=main.reverseList1(x1);
		main.printLinkList(nh);
	}
}
